//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pash.Configuration
{
    /// <summary>
    /// The AliasElement Configuration Element.
    /// </summary>
	public partial class AliasElement : global::System.Configuration.ConfigurationElement
	{
		#region name Property
		
        /// <summary>
        /// The XML name of the <see cref="name"/> property.
        /// </summary>
		internal const string namePropertyName = "name";
		
		/// <summary>
		/// Gets the name.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(namePropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
		public System.String name
		{
			get
			{
				return (System.String)base[namePropertyName];
			}
		}
		
		#endregion

		#region definition Property
		
        /// <summary>
        /// The XML name of the <see cref="definition"/> property.
        /// </summary>
		internal const string definitionPropertyName = "definition";
		
		/// <summary>
		/// Gets or sets the definition.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(definitionPropertyName, IsRequired = true, IsKey = false, IsDefaultCollection = false)]
		public System.String definition
		{
			get
			{
				return (System.String)base[definitionPropertyName];
			}
			set
			{
				base[definitionPropertyName] = value;
			}
		}
		
		#endregion

		#region scope Property
		
        /// <summary>
        /// The XML name of the <see cref="scope"/> property.
        /// </summary>
		internal const string scopePropertyName = "scope";
		
		/// <summary>
		/// Gets or sets the scope.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(scopePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = "global")]
		public System.String scope
		{
			get
			{
				return (System.String)base[scopePropertyName];
			}
			set
			{
				base[scopePropertyName] = value;
			}
		}
		
		#endregion

	}

    /// <summary>
    /// The VariableElement Configuration Element.
    /// </summary>
	public partial class VariableElement : global::System.Configuration.ConfigurationElement
	{
		#region name Property
		
        /// <summary>
        /// The XML name of the <see cref="name"/> property.
        /// </summary>
		internal const string namePropertyName = "name";
		
		/// <summary>
		/// Gets the name.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(namePropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
		public System.String name
		{
			get
			{
				return (System.String)base[namePropertyName];
			}
		}
		
		#endregion

		#region type Property
		
        /// <summary>
        /// The XML name of the <see cref="type"/> property.
        /// </summary>
		internal const string typePropertyName = "type";
		
		/// <summary>
		/// Gets or sets the type.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(typePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = "System.String")]
		public System.String type
		{
			get
			{
				return (System.String)base[typePropertyName];
			}
			set
			{
				base[typePropertyName] = value;
			}
		}
		
		#endregion

		#region value Property
		
        /// <summary>
        /// The XML name of the <see cref="value"/> property.
        /// </summary>
		internal const string valuePropertyName = "value";
		
		/// <summary>
		/// Gets or sets the value.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(valuePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = null)]
		public System.String value
		{
			get
			{
				return (System.String)base[valuePropertyName];
			}
			set
			{
				base[valuePropertyName] = value;
			}
		}
		
		#endregion

		#region scope Property
		
        /// <summary>
        /// The XML name of the <see cref="scope"/> property.
        /// </summary>
		internal const string scopePropertyName = "scope";
		
		/// <summary>
		/// Gets the scope.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(scopePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = "global")]
		public System.String scope
		{
			get
			{
				return (System.String)base[scopePropertyName];
			}
		}
		
		#endregion

	}

    /// <summary>
    /// The ExecutionContextConfigurationSection Configuration Section.
    /// </summary>
	public partial class ExecutionContextConfigurationSection : global::System.Configuration.ConfigurationSection
	{
		#region PSSnapins Property
		
        /// <summary>
        /// The XML name of the <see cref="PSSnapins"/> property.
        /// </summary>
		internal const string PSSnapinsPropertyName = "psSnapins";
		
		/// <summary>
		/// Gets or sets the PSSnapins.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(PSSnapinsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
		public PSSnapinCollection PSSnapins
		{
			get
			{
				return (PSSnapinCollection)base[PSSnapinsPropertyName];
			}
			set
			{
				base[PSSnapinsPropertyName] = value;
			}
		}
		
		#endregion

		#region Functions Property
		
        /// <summary>
        /// The XML name of the <see cref="Functions"/> property.
        /// </summary>
		internal const string FunctionsPropertyName = "functions";
		
		/// <summary>
		/// Gets or sets the Functions.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(FunctionsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
		public FunctionsCollection Functions
		{
			get
			{
				return (FunctionsCollection)base[FunctionsPropertyName];
			}
			set
			{
				base[FunctionsPropertyName] = value;
			}
		}
		
		#endregion

		#region Aliases Property
		
        /// <summary>
        /// The XML name of the <see cref="Aliases"/> property.
        /// </summary>
		internal const string AliasesPropertyName = "aliases";
		
		/// <summary>
		/// Gets or sets the Aliases.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(AliasesPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
		public AliasesCollection Aliases
		{
			get
			{
				return (AliasesCollection)base[AliasesPropertyName];
			}
			set
			{
				base[AliasesPropertyName] = value;
			}
		}
		
		#endregion

		#region Variables Property
		
        /// <summary>
        /// The XML name of the <see cref="Variables"/> property.
        /// </summary>
		internal const string VariablesPropertyName = "variables";
		
		/// <summary>
		/// Gets or sets the Variables.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(VariablesPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
		public VariablesCollection Variables
		{
			get
			{
				return (VariablesCollection)base[VariablesPropertyName];
			}
			set
			{
				base[VariablesPropertyName] = value;
			}
		}
		
		#endregion

        #region Singleton Instance

        /// <summary>
        /// The XML name of the ExecutionContextConfigurationSection Configuration Section.
        /// </summary>
		internal const string ExecutionContextConfigurationSectionSectionName = "defaultExecutionContext";

        /// <summary>
        /// Gets the ExecutionContextConfigurationSection instance.
        /// </summary>
        public static ExecutionContextConfigurationSection Instance
        {
            get
            {
                return global::System.Configuration.ConfigurationManager.GetSection(ExecutionContextConfigurationSectionSectionName) as ExecutionContextConfigurationSection;
            }
        }

        #endregion

		#region Xmlns Property
		
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
		internal const string XmlnsPropertyName = "xmlns";
		
		/// <summary>
		/// Gets the XML namespace of this Configuration Section.
		/// </summary>
		/// <remarks>
		/// This property makes sure that if the configuration file contains the XML namespace,
		/// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
		/// </remarks>
		[global::System.Configuration.ConfigurationProperty(XmlnsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
		public string Xmlns
		{
			get
			{
				return (string)base[XmlnsPropertyName];
			}
		}
		
		#endregion
	}

    /// <summary>
    /// The FunctionElement Configuration Element.
    /// </summary>
	public partial class FunctionElement : global::System.Configuration.ConfigurationElement
	{
		#region name Property
		
        /// <summary>
        /// The XML name of the <see cref="name"/> property.
        /// </summary>
		internal const string namePropertyName = "name";
		
		/// <summary>
		/// Gets the name.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(namePropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
		public System.String name
		{
			get
			{
				return (System.String)base[namePropertyName];
			}
		}
		
		#endregion

		#region type Property
		
        /// <summary>
        /// The XML name of the <see cref="type"/> property.
        /// </summary>
		internal const string typePropertyName = "type";
		
		/// <summary>
		/// Gets the type.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(typePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = "inline")]
		public System.String type
		{
			get
			{
				return (System.String)base[typePropertyName];
			}
		}
		
		#endregion

		#region value Property
		
        /// <summary>
        /// The XML name of the <see cref="value"/> property.
        /// </summary>
		internal const string valuePropertyName = "value";
		
		/// <summary>
		/// Gets or sets the value.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(valuePropertyName, IsRequired = true, IsKey = false, IsDefaultCollection = false)]
		public System.String value
		{
			get
			{
				return (System.String)base[valuePropertyName];
			}
			set
			{
				base[valuePropertyName] = value;
			}
		}
		
		#endregion

		#region scope Property
		
        /// <summary>
        /// The XML name of the <see cref="scope"/> property.
        /// </summary>
		internal const string scopePropertyName = "scope";
		
		/// <summary>
		/// Gets the scope.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(scopePropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false, DefaultValue = "global")]
		public System.String scope
		{
			get
			{
				return (System.String)base[scopePropertyName];
			}
		}
		
		#endregion

	}

    /// <summary>
    /// A collection of FunctionElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollection(typeof(FunctionElement), CollectionType = global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName = FunctionsCollection.FunctionElementPropertyName)]
	public partial class FunctionsCollection : global::System.Configuration.ConfigurationElementCollection
	{
		#region Constants
		
        /// <summary>
        /// The XML name of the individual <see cref="FunctionElement"/> instances in this collection.
        /// </summary>
		internal const string FunctionElementPropertyName = "function";

		#endregion
        
        #region Overrides

        /// <summary>
        /// Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"></see>.
        /// </summary>
        /// <value></value>
        /// <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"></see> of this collection.</returns>
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }

        /// <summary>
        /// Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"></see> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"></see>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// true if the element exists in the collection; otherwise, false. The default is false.
        /// </returns>
        protected override bool IsElementName(string elementName)
        {
            return (elementName == FunctionElementPropertyName);
        }

        /// <summary>
        /// Gets the element key for a specified configuration element when overridden in a derived class.
        /// </summary>
        /// <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for.</param>
        /// <returns>
        /// An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
        /// </returns>
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((FunctionElement)element).name;
        }

        /// <summary>
        /// When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
        /// </summary>
        /// <returns>
        /// A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
        /// </returns>
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new FunctionElement();
        }

        #endregion        
		
        #region Indexer

        /// <summary>
        /// Gets the <see cref="FunctionElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="FunctionElement"/> to retrieve</param>
        public FunctionElement this[int index]
        {
            get
            {
				return (FunctionElement)this.BaseGet(index);
			}
        }

        #endregion
		
        #region Add

        /// <summary>
        /// Adds the specified FunctionElement.
        /// </summary>
        /// <param name="function">The FunctionElement to add.</param>
        public void Add(FunctionElement function)
        {
            base.BaseAdd(function);
        }

        #endregion
		
        #region Remove

        /// <summary>
        /// Removes the specified FunctionElement.
        /// </summary>
        /// <param name="function">The FunctionElement to remove.</param>
        public void Remove(FunctionElement function)
        {
            base.BaseRemove(function);
        }

        #endregion
	}

    /// <summary>
    /// A collection of AliasElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollection(typeof(AliasElement), CollectionType = global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName = AliasesCollection.AliasElementPropertyName)]
	public partial class AliasesCollection : global::System.Configuration.ConfigurationElementCollection
	{
		#region Constants
		
        /// <summary>
        /// The XML name of the individual <see cref="AliasElement"/> instances in this collection.
        /// </summary>
		internal const string AliasElementPropertyName = "alias";

		#endregion
        
        #region Overrides

        /// <summary>
        /// Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"></see>.
        /// </summary>
        /// <value></value>
        /// <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"></see> of this collection.</returns>
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }

        /// <summary>
        /// Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"></see> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"></see>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// true if the element exists in the collection; otherwise, false. The default is false.
        /// </returns>
        protected override bool IsElementName(string elementName)
        {
            return (elementName == AliasElementPropertyName);
        }

        /// <summary>
        /// Gets the element key for a specified configuration element when overridden in a derived class.
        /// </summary>
        /// <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for.</param>
        /// <returns>
        /// An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
        /// </returns>
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((AliasElement)element).name;
        }

        /// <summary>
        /// When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
        /// </summary>
        /// <returns>
        /// A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
        /// </returns>
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new AliasElement();
        }

        #endregion        
		
        #region Indexer

        /// <summary>
        /// Gets the <see cref="AliasElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="AliasElement"/> to retrieve</param>
        public AliasElement this[int index]
        {
            get
            {
				return (AliasElement)this.BaseGet(index);
			}
        }

        #endregion
		
        #region Add

        /// <summary>
        /// Adds the specified AliasElement.
        /// </summary>
        /// <param name="alias">The AliasElement to add.</param>
        public void Add(AliasElement alias)
        {
            base.BaseAdd(alias);
        }

        #endregion
		
        #region Remove

        /// <summary>
        /// Removes the specified AliasElement.
        /// </summary>
        /// <param name="alias">The AliasElement to remove.</param>
        public void Remove(AliasElement alias)
        {
            base.BaseRemove(alias);
        }

        #endregion
	}

    /// <summary>
    /// A collection of VariableElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollection(typeof(VariableElement), CollectionType = global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName = VariablesCollection.VariableElementPropertyName)]
	public partial class VariablesCollection : global::System.Configuration.ConfigurationElementCollection
	{
		#region Constants
		
        /// <summary>
        /// The XML name of the individual <see cref="VariableElement"/> instances in this collection.
        /// </summary>
		internal const string VariableElementPropertyName = "variable";

		#endregion
        
        #region Overrides

        /// <summary>
        /// Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"></see>.
        /// </summary>
        /// <value></value>
        /// <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"></see> of this collection.</returns>
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }

        /// <summary>
        /// Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"></see> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"></see>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// true if the element exists in the collection; otherwise, false. The default is false.
        /// </returns>
        protected override bool IsElementName(string elementName)
        {
            return (elementName == VariableElementPropertyName);
        }

        /// <summary>
        /// Gets the element key for a specified configuration element when overridden in a derived class.
        /// </summary>
        /// <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for.</param>
        /// <returns>
        /// An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
        /// </returns>
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((VariableElement)element).name;
        }

        /// <summary>
        /// When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
        /// </summary>
        /// <returns>
        /// A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
        /// </returns>
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new VariableElement();
        }

        #endregion        
		
        #region Indexer

        /// <summary>
        /// Gets the <see cref="VariableElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="VariableElement"/> to retrieve</param>
        public VariableElement this[int index]
        {
            get
            {
				return (VariableElement)this.BaseGet(index);
			}
        }

        #endregion
		
        #region Add

        /// <summary>
        /// Adds the specified VariableElement.
        /// </summary>
        /// <param name="variable">The VariableElement to add.</param>
        public void Add(VariableElement variable)
        {
            base.BaseAdd(variable);
        }

        #endregion
		
        #region Remove

        /// <summary>
        /// Removes the specified VariableElement.
        /// </summary>
        /// <param name="variable">The VariableElement to remove.</param>
        public void Remove(VariableElement variable)
        {
            base.BaseRemove(variable);
        }

        #endregion
	}

    /// <summary>
    /// A collection of PSSnapinElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollection(typeof(PSSnapinElement), CollectionType = global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName = PSSnapinCollection.PSSnapinElementPropertyName)]
	public partial class PSSnapinCollection : global::System.Configuration.ConfigurationElementCollection
	{
		#region Constants
		
        /// <summary>
        /// The XML name of the individual <see cref="PSSnapinElement"/> instances in this collection.
        /// </summary>
		internal const string PSSnapinElementPropertyName = "psSnapin";

		#endregion
        
        #region Overrides

        /// <summary>
        /// Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"></see>.
        /// </summary>
        /// <value></value>
        /// <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"></see> of this collection.</returns>
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }

        /// <summary>
        /// Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"></see> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"></see>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// true if the element exists in the collection; otherwise, false. The default is false.
        /// </returns>
        protected override bool IsElementName(string elementName)
        {
            return (elementName == PSSnapinElementPropertyName);
        }

        /// <summary>
        /// Gets the element key for a specified configuration element when overridden in a derived class.
        /// </summary>
        /// <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"></see> to return the key for.</param>
        /// <returns>
        /// An <see cref="T:System.Object"></see> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"></see>.
        /// </returns>
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((PSSnapinElement)element).type;
        }

        /// <summary>
        /// When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"></see>.
        /// </summary>
        /// <returns>
        /// A new <see cref="T:System.Configuration.ConfigurationElement"></see>.
        /// </returns>
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new PSSnapinElement();
        }

        #endregion        
		
        #region Indexer

        /// <summary>
        /// Gets the <see cref="PSSnapinElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="PSSnapinElement"/> to retrieve</param>
        public PSSnapinElement this[int index]
        {
            get
            {
				return (PSSnapinElement)this.BaseGet(index);
			}
        }

        #endregion
		
        #region Add

        /// <summary>
        /// Adds the specified PSSnapinElement.
        /// </summary>
        /// <param name="psSnapin">The PSSnapinElement to add.</param>
        public void Add(PSSnapinElement psSnapin)
        {
            base.BaseAdd(psSnapin);
        }

        #endregion
		
        #region Remove

        /// <summary>
        /// Removes the specified PSSnapinElement.
        /// </summary>
        /// <param name="psSnapin">The PSSnapinElement to remove.</param>
        public void Remove(PSSnapinElement psSnapin)
        {
            base.BaseRemove(psSnapin);
        }

        #endregion
	}

    /// <summary>
    /// The PSSnapinElement Configuration Element.
    /// </summary>
	public partial class PSSnapinElement : global::System.Configuration.ConfigurationElement
	{
		#region type Property
		
        /// <summary>
        /// The XML name of the <see cref="type"/> property.
        /// </summary>
		internal const string typePropertyName = "type";
		
		/// <summary>
		/// Gets or sets the type.
		/// </summary>
		[global::System.Configuration.ConfigurationProperty(typePropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
		public System.String type
		{
			get
			{
				return (System.String)base[typePropertyName];
			}
			set
			{
				base[typePropertyName] = value;
			}
		}
		
		#endregion

	}

}

